{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KMP Testbench","text":"<p>Getting Started | Custom Plugins</p> <p>A modular tool for debugging Kotlin Multiplatform applications.</p> <p></p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Include the Desktop application plugin in your root <code>build.gradle.kts</code>:</p>"},{"location":"getting-started/#configure-gradle-plugin","title":"Configure Gradle Plugin","text":"<pre><code>plugins {\n  id(\"org.drewcarlson.testbench\") version \"0.0.9-SNAPSHOT\"\n}\n</code></pre> <p>Optional plugin configuration: <pre><code>testbench {\n  // ...\n}\n</code></pre></p>"},{"location":"getting-started/#configure-runtime-client","title":"Configure Runtime Client","text":"<p>Add the client and plugins to your <code>build.gradle.kts</code>: <pre><code>dependencies {\n  implementation(TestbenchDeps.clientCore)\n  implementation(TestbenchDeps.clientNetworkKtor)\n}\n</code></pre></p> <pre><code>val client = TestbenchClient(\n  plugins = listOf(MyPlugin())\n)\n</code></pre>"},{"location":"getting-started/#run-testbench","title":"Run Testbench","text":"<p>Launch the desktop app with the <code>runTestbench</code> task.</p> <pre><code>./gradlew runTestbench\n</code></pre> <p>You should see an idle testbench window:</p> <p></p>"},{"location":"custom-plugins/getting-started/","title":"Getting Started","text":"<p>Testbench makes it easy to define custom plugins and include them when running the desktop app.</p>"},{"location":"custom-plugins/getting-started/#installation","title":"Installation","text":"<p>Add the plugin-toolkit Gradle plugin and configure custom plugins in <code>settings.gradle.kts</code>:</p> <pre><code>plugins {\n  id(\"org.drewcarlson.testbench.plugin-toolkit\") version \"0.0.9-SNAPSHOT\"\n}\n\ntestbench {\n  includePlugin(\":plugins:my-plugin\") {\n    // optional: Create multiple client implementation variations\n    clientVariations(\"ktor\", \"okhttp\", \"fuel\")\n    // optional: Create only a desktop module without client or core modules\n    desktopOnly()\n  }\n}\n</code></pre>"},{"location":"custom-plugins/getting-started/#next-steps","title":"Next Steps","text":"<p>For next steps, see Plugin Basics.</p>"},{"location":"custom-plugins/plugin-basics/","title":"Plugin Basics","text":"<p>Custom plugins are a collection of modules:</p> <ul> <li><code>&lt;plugin&gt;-core</code>: A module shared by the server and client.</li> <li><code>&lt;plugin&gt;-client</code>: The client plugin to send data to the desktop client.</li> <li><code>&lt;plugin&gt;-desktop</code>: The desktop client plugin containing UI and server logic.</li> </ul>"},{"location":"custom-plugins/plugin-basics/#common-plugin","title":"Common Plugin","text":""},{"location":"custom-plugins/plugin-basics/#desktop-plugin","title":"Desktop Plugin","text":"<pre><code>class MyDesktopPlugin : ServerPlugin&lt;Unit, ClientMessage&gt; {\n\n  private val batteryPercentFlow = MutableStateFlow(0f)\n\n  override fun handleMessage(message: ClientMessage) {\n    batteryPercentFlow.value = message.batteryPercent\n  }\n\n  override val ui = UiHooks {\n    MainPanel { modifier -&gt;\n      val batteryPercent by batteryPercentFlow.collectAsState()\n      Column(modifier = modifier) {\n        Text(\"Battery:\")\n        ProgressBar(batteryPercent)\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"custom-plugins/plugin-basics/#client-plugin","title":"Client Plugin","text":"<pre><code>class MyClientPlugin : ClientPlugin&lt;Unit, ClientMessage&gt; {\n\n}\n</code></pre>"},{"location":"development/project-architecture/","title":"Architecture","text":""},{"location":"development/project-architecture/#modules","title":"Modules","text":"<ul> <li><code>desktop</code>: The Compose Multiplatform Desktop application.</li> </ul>"},{"location":"development/project-architecture/#sdk","title":"SDK","text":"<ul> <li><code>client-core</code>: The client used to connect a running application with the Desktop app.</li> <li><code>plugin-toolkit-core</code>: Common utilities for creating any kind of plugin.</li> <li><code>plugin-toolkit-client</code>: Utilities for creating client specific plugins.</li> <li><code>plugin-toolkit-desktop</code>: Utilities for creating Desktop app specific plugins.</li> </ul>"},{"location":"development/project-architecture/#gradle-plugins","title":"Gradle Plugins","text":"<ul> <li><code>gradle-plugin-project</code>: Gradle plugin used to include and run the Desktop app.</li> <li><code>gradle-plugin-settings</code>: Gradle Settings plugin used to create and configure custom plugins.</li> </ul>"},{"location":"development/project-architecture/#kotlin-compiler-plugins","title":"Kotlin Compiler Plugins","text":"<ul> <li><code>service-compiler-plugin</code>: Kotlin compiler plugin for generating ServiceLoader files for Desktop plugins.</li> </ul>"},{"location":"development/project-architecture/#testbench-plugins","title":"Testbench Plugins","text":"<ul> <li><code>plugins/databases</code></li> <li><code>plugins/logs</code></li> <li><code>plugins/network</code></li> <li><code>plugins/preferences</code></li> </ul>"},{"location":"plugins/network/","title":"Network Plugin","text":"<p>The network plugin allows you to capture and explore the network traffic in your project. It supports popular KMP networking libraries and is easily extended with support for custom HTTP clients.</p>"},{"location":"plugins/network/#ktor-v3","title":"Ktor v3","text":"<p>Monitor Ktor v3 client requests:</p> <p>Add dependency:</p> <pre><code>dependencies {\n  implementation(TestbenchDeps.networkClientKtor)\n\n  // or manually\n  implementation(\"org.drewcarlson.testbench:network-client-ktor:0.0.9-SNAPSHOT\")\n}\n</code></pre> <p>Configure the plugin:</p> <pre><code>// Set up the testbench plugin\nval networkPlugin = KtorNetworkClientPlugin()\n\n// Add it to the testbench client\nval testbenchClient =\n  TestbenchClient(\n    plugins = listOf(networkPlugin),\n  )\n\n// Install the Ktor Plugin\nval httpClient = HttpClient {\n  networkPlugin.install(this)\n}\n</code></pre>"},{"location":"plugins/network/#okhttp","title":"OkHttp","text":"<p>Monitor OkHttp requests:</p> <p>Add dependency:</p> <pre><code>dependencies {\n  implementation(TestbenchDeps.networkClientOkhttp)\n\n  // or manually\n  implementation(\"org.drewcarlson.testbench:network-client-okhttp:0.0.9-SNAPSHOT\")\n}\n</code></pre> <p>Configure the plugin:</p> <pre><code>// Set up the testbench plugin\nval networkPlugin = OkHttpNetworkClientPlugin()\n\n// Add it to the testbench client\nval testbenchClient =\n  TestbenchClient(\n    plugins = listOf(networkPlugin),\n  )\n\n// Install the OkHttp interceptor\nval okhttp = OkHttpClient.Builder()\n  .addInterceptor(networkPlugin)\n  .build()\n</code></pre>"},{"location":"plugins/network/#custom-http-client","title":"Custom HTTP Client","text":"<p>Add dependency on the core plugin library:</p> <pre><code>dependencies {\n  implementation(TestbenchDeps.networkClientCore)\n\n  // or manually\n  implementation(\"org.drewcarlson.testbench:network-client-core:0.0.9-SNAPSHOT\")\n}\n</code></pre> <p>Implement a <code>NetworkPlugin</code> using your HTTP clients middleware or logging APIs:</p> <pre><code>class CustomNetworkClientPlugin :\n    NetworkPlugin(),\n    ClientPlugin&lt;Unit, NetworkPluginMessage&gt; {\n\n  private val messageQueue = Channel&lt;NetworkPluginMessage&gt;(\n    capacity = Int.MAX_VALUE,\n    onBufferOverflow = BufferOverflow.DROP_OLDEST,\n  )\n\n  override val outgoingMessages: Flow&lt;NetworkPluginMessage&gt; = messageQueue.receiveAsFlow()\n\n  override suspend fun handleMessage(message: Unit) = Unit\n\n  suspend fun sendMessage(message: NetworkPluginMessage) {\n    messageQueue.emit(message)\n  }\n}\n\nval networkPlugin = CustomNetworkClientPlugin()\n\nval customHttpClient = HttpClientBuilder()\n  // Send update for a new request that is starting\n  .onRequest { request -&gt;\n    // Add ID to track response updates\n    request.attribute[\"debug-id\"] = uuid()\n    val message = NetworkRequestMessage(\n      id = request.attribute[\"debug-id\"],\n      url = request.urlString,\n      method = request.method,\n      headers = request.headers,\n      initiatedAt = request.startedAt,\n      body = request.bodyTextOrNull(),\n    )\n    networkPlugin.sendMessage(message)\n  }\n  .onResponse { response -&gt;\n    // Send update for completed response\n    NetworkResponseMessage.Completed(\n      id = response.attributes[\"debug-id\"],\n      headers = response.headers,\n      status = response.status,\n      body = response.bodyAsText(),\n    )\n    messageQueue.trySend(message)\n  }\n  .onError { error -&gt;\n    val message = when (error) {\n      // Send update for cancelled request\n      is RequestCancelled -&gt;\n        NetworkResponseMessage.Cancelled(\n          id = error.request.attributes[\"debug-id\"],\n          sent = true, // Set if the request was actually initiated\n        )\n      // Send update for a failed request\n      else -&gt;\n        NetworkResponseMessage.Failed(\n          id = id,\n          message = error.stackTraceToString(),\n        )\n    }\n    messageQueue.trySend(message)\n  }\n  .build()\n</code></pre>"}]}